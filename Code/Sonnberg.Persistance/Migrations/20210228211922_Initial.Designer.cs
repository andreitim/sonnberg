// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sonnberg.Persistance;

namespace Sonnberg.Persistance.Migrations
{
    [DbContext(typeof(SonnbergDbContext))]
    [Migration("20210228211922_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SonnPropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SonnSuiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SonnPropertyId");

                    b.HasIndex("SonnSuiteId");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnSuite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Suites");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnLocation", b =>
                {
                    b.HasOne("Sonnberg.Persistance.Entities.SonnUser", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnPhoto", b =>
                {
                    b.HasOne("Sonnberg.Persistance.Entities.SonnProperty", null)
                        .WithMany("Photos")
                        .HasForeignKey("SonnPropertyId");

                    b.HasOne("Sonnberg.Persistance.Entities.SonnSuite", null)
                        .WithMany("Photos")
                        .HasForeignKey("SonnSuiteId");

                    b.HasOne("Sonnberg.Persistance.Entities.SonnUser", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnProperty", b =>
                {
                    b.HasOne("Sonnberg.Persistance.Entities.SonnLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Sonnberg.Persistance.Entities.SonnUser", "User")
                        .WithMany("Properties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnSuite", b =>
                {
                    b.HasOne("Sonnberg.Persistance.Entities.SonnProperty", "Property")
                        .WithMany("Suites")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnProperty", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Suites");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnSuite", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Sonnberg.Persistance.Entities.SonnUser", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Photos");

                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
